#include <iostream>
#include <fstream>
#include <sstream>
#include "BST.h" // Include the Binary Search Tree header file for BST functionality.

// Function to parse a single line from a CSV file and convert it into an IrisRecord structure.
IrisRecord parseCSVLine(const std::string& line) {
    IrisRecord record; // Create an empty IrisRecord.
    std::istringstream ss(line); // Use istringstream to process the line.
    std::string field; // Temporary string to hold each CSV field.

    // Parse each field from the line, converting from string to the appropriate type.
    std::getline(ss, field, ','); // First field is the ID.
    record.id = std::stoi(field); // Convert string to integer.

    std::getline(ss, field, ','); // Next, the Sepal Length.
    record.sepalLength = std::stod(field); // Convert string to double.

    std::getline(ss, field, ','); // Sepal Width.
    record.sepalWidth = std::stod(field); // Convert string to double.

    std::getline(ss, field, ','); // Petal Length.
    record.petalLength = std::stod(field); // Convert string to double.

    std::getline(ss, field, ','); // Petal Width.
    record.petalWidth = std::stod(field); // Convert string to double.

    std::getline(ss, record.species, ','); // Species name, remains a string.

    return record; // Return the populated IrisRecord.
}

// Function to read the Iris dataset from a file and insert each record into a BST.
void readDatasetIntoBST(BST& bst, const std::string& filename) {
    std::ifstream file(filename); // Open the file for reading.
    if (!file.is_open()) { // Check if the file was successfully opened.
        std::cerr << "Error opening file: " << filename << std::endl;
        return; // If not, print an error message and exit the function.
    }

    std::string line;
    while (std::getline(file, line)) { // Read each line from the file.
        IrisRecord record = parseCSVLine(line); // Parse the line into an IrisRecord.
        bst.PutItem(record); // Insert the record into the BST.
    }

    file.close(); // Close the file when done.
}

int main() {
    BST bst; // Create a new BST instance.

    // Load the Iris dataset into the BST.
    readDatasetIntoBST(bst, "iris.csv");

    double threshold;
    std::cout << "Enter a threshold value for Sepal Length: ";
    std::cin >> threshold; // Prompt the user for a threshold value.

    // Print the records in the BST that exceed the given threshold.
    std::cout << "Printing records with Sepal Length exceeding " << threshold << ":" << std::endl;
    bst.PrintSubset(threshold); // Call the PrintSubset function of the BST.

    return 0; // End the program.
}
